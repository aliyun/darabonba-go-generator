import Source;

type @protocol = string
type @pathname = string
type @Strs = [ string ]
type @compleList = [[string]]
type @endpointMap = map[string]string
type @configs = [ Source.Config ];

init(config: Source.Config){
  @configs[0] = config;
}

model ComplexRequest = {
  accessKey: string,
  body: readable(name='Body', example='Body', description='Body'),
  strs: [ string ](name='Strs', example='Strs', description='Strs'),
  mapList: [ map[string]any ](name='mapList', example='mapList', description='mapList'),
  header: {
    content: string(name='Content', example='Content

test example
test example11', signed='true', description='The ID of the security group to which you want to assign the instance. Instances in the same security group can communicate with each other. The maximum number of instances that a security group can contain depends on the type of the security group. For more information, see the "Security group limits" section in [Limits](https://help.aliyun.com/document_detail/25412.html#SecurityGroupQuota).

>Notice:  The network type of the new instance must be the same as that of the security group specified by the `SecurityGroupId` parameter. For example, if the specified security group is of the VPC type, the new instance is also of the VPC type and you must specify `VSwitchId`.

If you do not use `LaunchTemplateId` or `LaunchTemplateName` to specify a launch template, you must specify SecurityGroupId. Take note of the following items:

*   You can set `SecurityGroupId` to specify a single security group or set `SecurityGroupIds.N` to specify one or more security groups. However, you cannot specify both `SecurityGroupId` and `SecurityGroupIds.N`.
*   If `NetworkInterface.N.InstanceType` is set to `Primary`, you cannot specify `SecurityGroupId` or `SecurityGroupIds.N` but can specify `NetworkInterface.N.SecurityGroupId` or `NetworkInterface.N.SecurityGroupIds.N`.', nullable=true, checkBlank=true, sensitive=true)
  }(description='header', name='header'),
  configs: {
    key: string,
    value: [ string ],
    extra: map[string] string
  },
  num: number,
  i64: int64,
  f64: double,
  b: boolean,
  f32: float,
  f64List: [ double ],
  floatList: [ float ],
  booleantList: [ boolean ],
  i32: int32,
  stringList: [ string ],
  intList: [ integer ],
  int32List: [ int32 ],
  int16List: [ int16 ],
  int64List: [ int64 ],
  longList: [ long ],
  uint64List: [ uint64 ],
  uint32List: [ uint32 ],
  uint16List: [ uint16 ],
  u64: uint64,
  u32: uint32,
  u16: uint16,
  obj: object,
  any: any,
  byt: bytes,
  req: $Request,
  resp: $Response,
  map: map[string]string,
  numMap: map[string]number,
  modelMap: map[string]Source.Request,
  request: Source.Request,
  client: Source,
  instance: Source.Request.instance,
  part?: [
    {
      partNumber?: string(description='PartNumber', name='PartNumber')
    }
  ](description='Part', name='Part', deprecated=true),
}

model Response {
  instance: ComplexRequest.part,
}

async function hello(request: object, strs: [ string ], complexList: [[string]]): [ string ] {
  var a : [[string]] = null;
  return array1();
}

static async function print(reqeust: $Request, reqs: [ ComplexRequest ], response: $Response, val: map[string]string): Source.Request;

static function intToInt32(a: int32):void;
api Complex1(request: ComplexRequest, client: Source): Source.RuntimeObject {
  var name = 'complex';
  var read : readable = null;
  var byt : bytes = null;
  var moduleModelMapVal: map[string] Source.RuntimeObject = {};
  var moduleMapVal: map[string] Source = {};
  var modelMapVal: map[string] ComplexRequest = {};
  var subModelMapVal: map[string] ComplexRequest.header = {};
  var reqMap : map[string]ComplexRequest = null;
  var mapString = {
    str = request.accessKey,
  };
  var inte : integer = 1;
  var a : integer = 1;
  var b : int32 = null;
  b = a;
  var c : int32 = a;
  intToInt32(a);
  var mapVal = {
    read = read,
    test = '{"test":"ok"}',
    b = request.b,
    num = request.num,
    u16 = request.u16,
    u32 = request.u32,
    u64 = request.u64,
    u16List = request.uint16List,
    u32List = request.uint32List,
    u64List = request.uint64List,
    i64List = request.int64List,
    i16List = request.int16List,
    i32List = request.int32List,
    intList = request.intList,
    stringList = request.stringList,
    i32 = request.i32,
    booleantList = request.booleantList,
    floatList = request.floatList,
    float64List = request.f64List,
    f32 = request.f32,
    f64 = request.f64,
    i64 = request.i64,
  };
  var req = new ComplexRequest{
    b = false,
    num = 10,
    i32 = a,
    intList = [10,11],
    int16List = [10, 11],
    int32List = [10, 11],
    int64List = [10, 11],
    longList = [10L, 11L],
    floatList = [ 0.1f, 0.2f ],
    stringList = ['10','11'],
    booleantList = [ true, false ],
  };
  var longList : [long] = [
    432435L 
  ];
  var anyList : [any] = [
    432435L,
    "str",
    true,
    10,
    0.1f
  ];
  var floatMap : map[string]float = {
    key1 = 0.1f,
    key2 = 0.2
  };
  var doubleMap : map[string]double = {
    key1 = 0.1d,
    key2 = 0.2d
  };
  var intMap : map[string]integer = {
    key1 = 1,
    key2 = 2
  };
  var longMap : map[string]long = {
    key1 = 1,
    key2 = 2
  };
  var int16Map : map[string]int16 = {
    key1 = 1,
    key2 = 2
  };
  var int32Map : map[string]int32 = {
    key1 = 1,
    key2 = 2
  };
  var int64Map : map[string]int64 = {
    key1 = 1,
    key2 = 2
  };
  var anyMap : map[string]any = {
    key1 = 0.1,
    key2 = 1,
    key3 = 'test',
    key4 = true,
    key5 = ['test', 1, true, ['test']],
    key6 = [
      {
        a = "test",
        b = 1,
        c = true,
        d = ['test'],
      }
    ],
  };
  for (var item : ["1","2"]) {
    var anyMap : map[string]string = {};
    anyMap[item] = 'test';
    break;
  }
  @Strs = request.strs;
  @endpointMap[@protocol];
  @endpointMap['test'] = 'ok';
  request.strs = @Strs;
  __request.protocol = @protocol;
  __request.port = request.num;
  __request.method = 'GET';
  __request.pathname = `/${@pathname}`;
  __request.query = {
    date = '2019',
    name = __request.method,
  };
  var tmp = {
    ...__request.query,
    ...__request.headers,
    ...__request,
  };
} returns {
  if (true && true){
    return null;
  } else if(true || false){
    return new Source.RuntimeObject{};
  }
  client.print(request, '1');
  hello(request, ["1","2"], null);
  hello(null, null, null);
  return {};
  Complex3(null);
  return null;
} runtime {
  timeouted = 'retry'
} 

api Complex2(request: ComplexRequest, str: [ string ], val: map[string]string): object {
  var name = 'complex';
  var config = new Source.Config{};
  var client = new Source(config);
  var configArray : [Source.Config] = [config];
  __request.protocol = 'HTTP';
  __request.port = 80;
  __request.method = 'GET';
  __request.pathname = '/';
  __request.query = {
    date = '2019',
    protocol = __request.protocol,
  };
}

api ComplexMap(): map[string]any {
} runtime {
  
}

api Complex3(request: ComplexRequest): ComplexRequest {
  var name = 'complex';
  __request.protocol = templateString();
  __request.port = 80;
  __request.method = 'GET';
  __request.pathname = '/';
  __request.body = 'body';
  __request.query = {
    date = '2019',
  };
  var tmp : ComplexRequest = null;
  tmp = returnModel();
} returns {
  var resp = __response;
  var req = new Source.Request{
    accesskey = request.accessKey,
    region = resp.statusMessage
  };
  array0(request);
  req.accesskey = 'accesskey';
  req.accesskey = request.accessKey;
  printNull();
  throwsFunc();
  __response.statusCode;
  Source.array(request, '1');
  return {
    ...__request.query
  };
}

static function assignWithArray() throws: void {
  var list : [ string ] = null;
  list = [ "test" ];

  var str : string = null;
  str = throwsFunc();
}

function mapAcess(): void {
  var tmp : map[string]any = {
    protocol = @endpointMap[@protocol],
  };
}

async function exprFunc(): [ string ] {
  if (!true) {

  }
  var num = 10;
  var req = new ComplexRequest{};
  var mapVal : map[string]any = {
    num = 10,
    client = Source,
    strs = array1(),
    str = `string${num}`,
    str1 = `string${req.accessKey}`,
  };
  return null;
}

static async function printNull(): void {
  try {
    var str = templateString();
  } catch(e) {

  } finally {
    var final = 'ok';
  }
}

static async function testTryWithComplexReturnType(): Source.Request {
  try {
    var str = templateString();
  } catch(e) {

  } finally {
    var final = 'ok';
  }
  return null;
}

static async function testTryWithComplexReturnTypeWithOutCat(): Source.Request {
  try {
    var str = templateString();
  } catch(e) {
    var sim = 'a';
  } finally {
    var final = 'ok';
  }
  return null;
}

static function array0(req: object): [ any ] {
  return [];
}

static function array1(): [ string ] {
  return ["1"];
}

async function templateString(): string {
  return `/${@protocol}`;
}

function throwsFunc() throws: string {
  return `/${@protocol}`;
}

function throwsFunc1() throws: string {
  return '';
}

function throwsFunc2() throws: void {
  throw {
    code = '',
  };
}

function throwsFunc3() throws: string {
  throw {
    code = '',
  };
}

function returnFunc(): string {
  return null;
}

function returnFunc1(cfg: Source.Config): Source {
  var config = new Source.Config{};
  return new Source(config);
}

function returnFunc2(): map[string]any {
  var tmp = {
    subMap = 'ok',
  };
  var mapVal = {
    test = tmp,
  };
  if (true) {
    return mapVal['test'];
  } else {
    var body : readable = null;
    return {
      body = body,
      ...tmp
    };
  }
}

function returnModel(): ComplexRequest {
  return new ComplexRequest{};
}

function emptyFunc(): void;

api noReturn(): void {
}

function Error(e: $Error): $Error {
  var tmp : $Error = null;
  var c : class = null;
  return e;
}

static function arrayAccess(): string {
  var configs = ['a', 'b', 'c'];
  var config = configs[0];
  return config;
}

static function arrayAccess2(): string {
  var data = {
    configs = ['a', 'b', 'c']
  };
  var config = data.configs[0];
  return config;
}

static function arrayAccess3(request: ComplexRequest): string {
  var req = new Source.Request{};
  arrayAccess4([req]);
  var configVal = request.configs.value[0];
  return configVal;
}

static function arrayAccess4(requests: [ Source.Request ]): string {
  return '';
}

static function arrayAssign(config: string): [ string ] {
  var configs = ['a', 'b', 'c'];
  configs[3] = config;
  return configs;
}

static function arrayAssign2(config: string): [ string ] {
  var data = {
    configs = ['a', 'b', 'c']
  };
  data.configs[3] = config;
  return data.configs;
}

static function arrayAssign3(request: ComplexRequest, config: string): void {
  request.configs.value[0] = config;
}

static function mapAccess(request: ComplexRequest): string {
  var configInfo = request.configs.extra['name'];
  return configInfo;
}

static function mapAccess2(request: Source.Request): string {
  var configInfo = request.configs.extra['name'];
  return configInfo;
}

static function mapAccess3(): string {
  var data = {
    configs  = {
      value = 'string'
    } 
  };
  return data.configs['value'];
}

static function mapAccess4(request: ComplexRequest): string {
  var key : string = 'name';
  var model = request.modelMap[key];
  var configInfo = request.configs.extra[key];
  return configInfo;
}

static function mapAssign(request: ComplexRequest, name: string): void {
  request.configs.extra['name'] = name;
  var key : string = 'name';
  request.configs.extra[key] = name;
  request.map[key] = name;
  request.numMap[key] = 1;
}  

static function arrayimport2(request: [ Source.Request ]): string {
  var s = `{
    "a": "test",
    "b": "ok"
  }`;
  return '';
}

static async function defaultReturn(): void {
  if (true) {

  } else {
    
  }
}  